---
- name: Deploy microservices
  hosts: edgehub
  become: yes

  vars:
    # ========================================================================
    # MANDATORY vars to change in your environment
    base_domain: kemo.edge
    unified_api_endpoint: "https://unified-api.apps.{{ base_domain }}"
    haproxy_dns_server: 192.168.99.2

    # Podman Networking things
    # Podman bridge must already be set up
    podman_bridge_name: lanBridge
    unified_api_ip_address: 192.168.99.14
    scanner_app_ip_address: 192.168.99.15
    job_code_web_ip_address: 192.168.99.17
    haproxy_ingress_ip_address: 192.168.99.16
    nginx_websrv_ip_address: 192.168.99.12
    registry_ip_address: 192.168.99.18

    # Create a PKI first with the scripts in the pki-the-hard-way directory
    root_ca_cert_file_path: ../pki-the-hard-way/.pki/root-ca/public_bundles/certs/kemo-labs-certificate-authority.cert.pem
    wildcard_cert_file_path: "../pki-the-hard-way/.pki/root-ca/intermediates/kemo-labs-intermediate-certificate-authority/signing/kemo-labs-edge-sca/certs/bundle_haproxy-edge-hub.{{ base_domain }}.cert.pem"

    aap2_controller_url: "https://aap2-controller.{{ base_domain }}"
    aap2_controller_token: LmcwokPirudGDMBJWYgxNj5RkVW2iE
    aap2_rhde_inventory_id: 2
    aap2_rhde_infrastructure_inventory_id: 3
    aap2_glue_job_template_id: 9
    aap2_update_pxe_job_template_id: 7

    # ========================================================================
    # Optional vars to change in your environment
    mirror_htpasswd: |
      # mirrormirror / Passw0rd123
      mirrormirror:$2y$05$RQPTU52YU9MUUzt0p6/qg.OowR0msnkz8hzvnU7WnYZzDu5HlktjK

    mirror_pull_secret: "{\"auths\": {\"registry.apps.{{ base_domain }}\": {\"auth\": \"bWlycm9ybWlycm9yOlBhc3N3MHJkMTIz\"}}}"

    # ========================================================================
    # No need to really change much under here
    # These two containers aren't needed any more - but keep em around anyway
    #glueServiceContainer: quay.io/kenmoini/fdo-ansible-glue:latest
    #jobCodeAPIContainer: quay.io/kenmoini/job-code-api:latest
    jobCodeWebContainer: quay.io/kenmoini/job-code-web:latest
    scannerAppContainer: quay.io/kenmoini/scanner-app:latest
    unifiedAPIContainer: quay.io/kenmoini/ztp-edge-unified-api:latest
    haproxyContainer: docker.io/haproxy:latest
    nginxContainer: docker.io/nginx:latest
    registryContainer: docker.io/library/registry:2
    ntpContainer: docker.io/publicarray/chrony:latest

    service_containers_dir: /opt/service-containers

    haproxy_endpoints:
      - name: unified_api
        domain: "unified-api.apps.{{ base_domain }}"
        ip: "unified-api.{{ base_domain }}"
        port: 9876
      - name: scanner_app
        domain: "scanner-app.apps.{{ base_domain }}"
        ip: "scanner-app.{{ base_domain }}"
        port: 8080
      - name: job_code_web
        domain: "job-code-manager.apps.{{ base_domain }}"
        ip: "job-code-web.{{ base_domain }}"
        port: 8501
      - name: nginx_websrv
        domain: "websrv.apps.{{ base_domain }}"
        ip: "websrv.{{ base_domain }}"
        port: 80
      - name: registry
        domain: "registry.apps.{{ base_domain }}"
        ip: "registry.{{ base_domain }}"
        port: 5000

    services:
      - name: unified-api
        image: "{{ unifiedAPIContainer }}"
        network:
          name: "{{ podman_bridge_name }}"
          ip: "{{ unified_api_ip_address }}"
          ports:
            - 9876
        volumes:
          - host_path: /opt/job-codes
            container_path: /opt/job-codes
          - host_path: /opt/isos
            container_path: /opt/isos
          - host_path: "/etc/pki/ca-trust/extracted"
            container_path: "/etc/pki/ca-trust/extracted:ro"
          - host_path: "/etc/pki/tls"
            container_path: "/etc/pki/tls:ro"
        resources:
          memory: 512m
        env:
        - name: "JOB_CODES_DIR"
          value: "/opt/job-codes"
        - name: "ISO_DIR"
          value: "/opt/isos"
        - name: AAP_CONTROLLER_URL
          value: "{{ aap2_controller_url }}"
        - name: AAP_CONTROLLER_TOKEN
          value: "{{ aap2_controller_token }}"
        - name: AAP_INVENTORY_ID
          value: "{{ aap2_rhde_inventory_id }}"
        - name: AAP_GLUE_INVENTORY_ID
          value: "{{ aap2_rhde_inventory_id }}"
        - name: AAP_GLUE_JOB_TEMPLATE_ID
          value: "{{ aap2_glue_job_template_id }}"
        - name: AAP_UPDATE_PXE_JOB_TEMPLATE_ID
          value: "{{ aap2_update_pxe_job_template_id }}"

      - name: scanner-app
        image: "{{ scannerAppContainer }}"
        network:
          name: "{{ podman_bridge_name }}"
          ip: "{{ scanner_app_ip_address }}"
          ports:
            - 8080
        resources:
          memory: 512m
        volumes:
          - host_path: "/etc/pki/ca-trust/extracted"
            container_path: "/etc/pki/ca-trust/extracted:ro"
          - host_path: "/etc/pki/tls"
            container_path: "/etc/pki/tls:ro"
          - host_path: "{{ service_containers_dir }}/scanner-app/volumes/config"
            container_path: "/opt/app-root/src/config:ro"

      - name: job-code-web
        image: "{{ jobCodeWebContainer }}"
        network:
          name: "{{ podman_bridge_name }}"
          ip: "{{ job_code_web_ip_address}}"
          ports:
            - 8501
        resources:
          memory: 512m
        env:
          - name: "BACKEND_API"
            value: "https://unified-api.apps.{{ base_domain }}"
        volumes:
          - host_path: "/etc/pki/ca-trust/extracted"
            container_path: "/etc/pki/ca-trust/extracted:ro"
          - host_path: "/etc/pki/tls"
            container_path: "/etc/pki/tls:ro"

      - name: haproxy-ingress
        image: "{{ haproxyContainer }}"
        network:
          name: "{{ podman_bridge_name }}"
          ip: "{{ haproxy_ingress_ip_address }}"
          ports:
            - 80
            - 443
        resources:
          memory: 512m
        volumes:
          - host_path: "{{ service_containers_dir }}/haproxy-ingress/volumes/config"
            container_path: "/usr/local/etc/haproxy:ro"
          - host_path: "{{ service_containers_dir }}/shared/volumes/certs"
            container_path: "/usr/local/etc/certs:ro"
        extra_args:
          - "--sysctl net.ipv4.ip_unprivileged_port_start=0"

      - name: nginx-websrv
        image: "{{ nginxContainer }}"
        network:
          name: "{{ podman_bridge_name }}"
          ip: "{{ nginx_websrv_ip_address }}"
          ports:
            - 80
        resources:
          memory: 512m
        volumes:
          - host_path: /opt/isos
            container_path: /usr/share/nginx/html/isos
          - host_path: /var/ftp/pub/pxe
            container_path: /usr/share/nginx/html/pxe
          - host_path: /opt/dropbox
            container_path: /usr/share/nginx/html/dropbox
          - host_path: /opt/ostree
            container_path: /usr/share/nginx/html/ostree
          - host_path: /opt/ostree
            container_path: /usr/share/nginx/html/ostree

      - name: registry
        image: "{{ registryContainer }}"
        network:
          name: "{{ podman_bridge_name }}"
          ip: "{{ registry_ip_address }}"
          ports:
            - 5000
        resources:
          memory: 512m
        env:
          - name: REGISTRY_HTTP_SECRET
            value: "/auth/registry.htpasswd"
          - name: REGISTRY_AUTH
            value: "htpasswd"
          - name: REGISTRY_AUTH_HTPASSWD_REALM
            value: "RegistryRealm"
          - name: REGISTRY_AUTH_HTPASSWD_PATH
            value: "/auth/registry.htpasswd"
        volumes:
          - host_path: /opt/registry
            container_path: /var/lib/registry
          - host_path: "{{ service_containers_dir }}/shared/volumes/certs"
            container_path: "/auth:ro"

      # just use chronyd on the host
      # - name: lab-chronyd
      #   image: "{{ ntpContainer }}"
      #   network:
      #     name: host
      #     ports:
      #       - 123/udp
      #       - 323/udp
      #   extra_args:
      #     - "--cap-add SYS_TIME"
      #     - "-t"
      #   resources:
      #     memory: 64m
      #   volumes:
      #   - host_path: "{{ service_containers_dir }}/lab-chronyd/config/chrony.confg"
      #     container_path: /etc/chrony.conf:Z
      #   - host_path: "{{ service_containers_dir }}/lab-chronyd/volumes/chrony"
      #     container_path: /etc/chrony:Z

    packages:
      - podman
      - cockpit
      - cockpit-podman

  tasks:
    - name: Copy the root cert to the host
      ansible.builtin.copy:
        src: "{{ root_ca_cert_file_path }}"
        dest: "/etc/pki/ca-trust/source/anchors/internal-root-ca.pem"

    - name: Update the system CA trust
      ansible.builtin.command:
        cmd: update-ca-trust

    - name: update packages
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install Podman and Cockpit
      ansible.builtin.dnf:
        name: "{{ packages }}"
        state: present

    - name: Start the cockpit service
      ansible.builtin.systemd:
        name: cockpit.socket
        state: started
        enabled: yes

    - name: Start the podman service
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - podman.socket
        - podman.service

    - name: Pull the container images
      containers.podman.podman_image:
        name: "{{ container_image }}"
        pull: yes
        force: yes
      loop:
        - "{{ jobCodeWebContainer }}"
        - "{{ scannerAppContainer }}"
        - "{{ unifiedAPIContainer }}"
        - "{{ haproxyContainer }}"
        - "{{ nginxContainer }}"
        - "{{ registryContainer }}"
        #- "{{ jobCodeAPIContainer }}"
        #- "{{ glueServiceContainer }}"
        #- "{{ ntpContainer }}"
      loop_control:
        loop_var: container_image

    - name: Template the container unit files
      ansible.builtin.template:
        src: "templates/caas.service.j2"
        dest: "/etc/systemd/system/{{ service.name }}.service"
      loop: "{{ services }}"
      loop_control:
        loop_var: service

    - name: Create the service directories
      ansible.builtin.file:
        path: "{{ service_containers_dir }}/{{ service.name }}"
        state: directory
      loop: "{{ services }}"
      loop_control:
        loop_var: service

    - name: Create the service scripts directories
      ansible.builtin.file:
        path: "{{ service_containers_dir }}/{{ service.name }}/scripts"
        state: directory
      loop: "{{ services }}"
      loop_control:
        loop_var: service

    - name: Make needed shared directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "/opt/job-codes"
        - "/opt/job-codes/claims"
        - "/opt/isos"
        - "/opt/dropbox"
        - "/opt/pxe"
        - "/opt/ostree"
        - "/opt/registry"
        - "{{ service_containers_dir }}/shared/volumes/certs"
        - "{{ service_containers_dir }}/haproxy-ingress/volumes/config"
        - "{{ service_containers_dir }}/scanner-app/volumes/config"
        #- "{{ service_containers_dir }}/lab-chronyd/volumes/chrony"
        #- "{{ service_containers_dir }}/lab-chronyd/config"

    - name: Set permissionss on shared directories
      ansible.builtin.file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      loop:
        - "/opt/dropbox"
        - "/opt/job-codes"
        - "/opt/job-codes/claims"
        - "/opt/registry"

    - name: Make the registry htpasswd file
      ansible.builtin.copy:
        content: "{{ mirror_htpasswd }}"
        dest: "{{ service_containers_dir }}/shared/volumes/certs/registry.htpasswd"

    - name: Make the registry pull secret file
      ansible.builtin.copy:
        content: "{{ mirror_pull_secret }}"
        dest: "{{ service_containers_dir }}/shared/volumes/certs/pull-secret.json"

    - name: Copy the root cert to the web dropbox
      ansible.builtin.copy:
        src: "{{ root_ca_cert_file_path }}"
        dest: "/opt/dropbox/root-ca.pem"

    - name: Copy the root cert to the web dropbox in crt format
      ansible.builtin.copy:
        src: "{{ root_ca_cert_file_path }}"
        dest: "/opt/dropbox/root-ca.crt"

    - name: Template chronyd config
      ansible.builtin.template:
        src: "templates/chrony.conf.j2"
        dest: "/etc/chrony.conf"
        backup: yes
      register: chrony_conf

    - name: Restart the chronyd service
      when: chrony_conf.changed
      ansible.builtin.systemd:
        name: chronyd
        state: restarted
        enabled: yes

    - name: Template the scanner app config
      ansible.builtin.template:
        src: "templates/scanner-app.config.js.j2"
        dest: "{{ service_containers_dir }}/scanner-app/volumes/config/frontend-connection.js"

    - name: Copy the wildcard certificate to the host
      ansible.builtin.copy:
        src: "{{ wildcard_cert_file_path }}"
        dest: "{{ service_containers_dir }}/shared/volumes/certs/haproxy_wildcard.pem"

    - name: Template the HAProxy config file over
      ansible.builtin.template:
        src: "templates/haproxy.cfg.j2"
        dest: "{{ service_containers_dir }}/haproxy-ingress/volumes/config/haproxy.cfg"

    - name: Template the HAProxy crtlist file over
      ansible.builtin.template:
        src: "templates/crt-list.cfg.j2"
        dest: "{{ service_containers_dir }}/haproxy-ingress/volumes/config/crt-list.cfg"

    - name: Create the container init scripts
      ansible.builtin.template:
        src: "templates/servicectl.sh.j2"
        dest: "{{ service_containers_dir }}/{{ service.name }}/scripts/servicectl.sh"
        mode: 0755
      loop: "{{ services }}"
      loop_control:
        loop_var: service

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Start the container services
      ansible.builtin.systemd:
        name: "{{ service.name }}"
        state: started
        enabled: yes
      loop: "{{ services }}"
      loop_control:
        loop_var: service

    - name: Pull and push containers
      ansible.builtin.shell: |
        podman tag {{ item }} {{ item | replace('quay.io', 'registry.apps.'+ base_domain) | replace('docker.io', 'registry.apps.' + base_domain) }}
        podman push --authfile {{ service_containers_dir }}/shared/volumes/certs/pull-secret.json {{ item | replace('quay.io', 'registry.apps.' + base_domain) | replace('docker.io', 'registry.apps.' + base_domain) }}
      loop:
      - "{{ haproxyContainer }}"
      - "{{ nginxContainer }}"
      - "{{ registryContainer }}"
      - "{{ jobCodeWebContainer }}"
      - "{{ scannerAppContainer }}"
      - "{{ unifiedAPIContainer }}"
      - "{{ ntpContainer }}"
      - quay.io/kenmoini/rhde-ztp-ee:latest
      #- "{{ glueServiceContainer }}"
      #- "{{ jobCodeAPIContainer }}"
