#!/bin/bash

set -x

###################################################################################
# VARIABLES
###################################################################################

CONTAINER_NAME="{{ service.name }}"
CONTAINER_SOURCE="{{ service.image }}"
NETWORK_NAME="{{ service.network.name }}"
{% if service.network.ip is defined %}
IP_ADDRESS="{{ service.network.ip }}"
{% endif %}

{% if service.network.ports is defined %}
CONTAINER_PORTS="{% for port in service.network.ports %}-p {{ port }} {% endfor %}"
{% else %}
CONTAINER_PORTS=""
{% endif %}

{% if service.volumes is defined %}
VOLUMES="{% for volume in service.volumes %}-v {{ volume.host_path }}:{{ volume.container_path }} {% endfor %}"
{% else %}
VOLUMES=""
{% endif %}

{% if service.env is defined %}
ENV_VARS='{% for env in service.env %}-e {{ env.name }}={{ env.value }} {% endfor %}'
{% else %}
ENV_VARS=""
{% endif %}

{% if service.extra_args is defined %}
EXTRA_ARGS="{% for arg in service.extra_args %}{{ arg }} {% endfor %}"
{% else %}
EXTRA_ARGS=""
{% endif %}

{% if service.env_files is defined %}
ENV_FILES="{% for env_file in service.env_files %}--env-file {{ env_file }} {% endfor %}"
{% else %}
ENV_FILES=""
{% endif %}

{% if service.resources.memory is defined %}
RESOURCE_LIMITS="-m {{ service.resources.memory }}"
{% else %}
RESOURCE_LIMITS=""
{% endif %}

###################################################################################
# EXECUTION PREFLIGHT
###################################################################################

## Ensure there is an action arguement
if [ -z "$1" ]; then
  echo "Need action arguement of 'start', 'restart', or 'stop'!"
  echo "${0} start|stop|restart"
  exit 1
fi


################################################################################### SERVICE ACTION SWITCH
case $1 in

  ################################################################################# RESTART/STOP SERVICE
  "restart" | "stop" | "start")
    echo "Stopping container services if running..."

    echo "Killing ${CONTAINER_NAME} container..."
    /usr/bin/podman kill ${CONTAINER_NAME}

    echo "Removing ${CONTAINER_NAME} container..."
    /usr/bin/podman rm -f -i ${CONTAINER_NAME}
    ;;

esac

case $1 in

  ################################################################################# RESTART/START SERVICE
  "restart" | "start")
    sleep 3

    echo "Checking for stale network lock file..."
    FILE_CHECK="/var/lib/cni/networks/${NETWORK_NAME}/${IP_ADDRESS}"
    if [[ -f "$FILE_CHECK" ]]; then
        rm -f $FILE_CHECK
    fi

    echo "Starting container services..."

    # Deploy ${CONTAINER_NAME} container
    echo -e "Deploying ${CONTAINER_NAME}...\n"

    /usr/bin/podman run -d --name "${CONTAINER_NAME}" --privileged \
      --network "${NETWORK_NAME}" --ip "${IP_ADDRESS}" ${CONTAINER_PORTS} \
      ${ENV_VARS} \
      ${VOLUMES} \
      ${EXTRA_ARGS} \
      ${ENV_FILES} \
      ${RESOURCE_LIMITS} ${CONTAINER_SOURCE}

    ;;

esac