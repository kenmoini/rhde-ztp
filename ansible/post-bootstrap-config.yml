---
- name: Post-bootstrap Configuration of RHDE Nodes
  hosts: all

  vars:
    pull_secret: "json_here" # from Ansible Vault

    microshift_hostname: "{{ inventory_hostname }}"
    microshift_base_domain: kemo.edge

    microshift_config:
      network:
        clusterNetworkCIDRs:
          - 10.42.0.0/16
        serviceNetwork:
          - 10.43.0.0/16
        serviceNodePortRange: 30000-32767
      apiServer:
        subjectAltNames:
          - api.{{ microshift_hostname }}.{{ microshift_base_domain }}

    #lvm_device: /dev/sda
    lvm_vg_name: mshift

    connect_to_azure_arc: true
    azureResourceGroup: AzureArcTest

  tasks:

    - name: Include vaulted variables
      ansible.builtin.include_vars:
        file: "{{ item }}"
      loop:
        - vault-vars/azure-sp.yml
        - vault-vars/microshift-pull-secret.yml

    - name: Wait for the system to come online in case it just rebooted
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 300

    - name: Detect non-bootdisk
      block:
        - name: Collect only facts about hardware
          ansible.builtin.setup:
            gather_subset:
            - hardware

        - name: Set facts for detected disks
          ansible.builtin.set_fact:
            disks: "{{ hostvars[inventory_hostname].ansible_devices.keys() | list }}"

        - name: Remove any disk from disks that start with dm
          ansible.builtin.set_fact:
            disks: "{{ disks | difference([item]) }}"
          loop: "{{ disks }}"
          when: item.startswith('dm')

        - name: Debug
          ansible.builtin.debug:
            var: disks

        - name: Find matching boot disk
          ansible.builtin.shell: |
            fdisk -l | grep "EFI"
          register: boot_disk

        - name: Debug
          ansible.builtin.debug:
            var: boot_disk.stdout

        - name: Loop through the disks, set a fact if it is in the boot_disk
          ansible.builtin.set_fact:
            detected_boot_disk: "{{ item }}"
          loop: "{{ disks }}"
          when: item in boot_disk.stdout

        - name: Debug
          ansible.builtin.debug:
            var: detected_boot_disk

        - name: Remove the boot disk from the disks
          ansible.builtin.set_fact:
            disks: "{{ disks | difference([detected_boot_disk]) }}"

        - name: Debug
          ansible.builtin.debug:
            var: disks

        - name: Set the lvm_device
          ansible.builtin.set_fact:
            lvm_device: "/dev/{{ disks | first }}"

    - name: Enable SELinux
      ansible.posix.selinux:
        policy: targeted
        state: enforcing

    - name: Configure new LVM Volume Group with the second disk
      ansible.builtin.lvg:
        vg: "{{ lvm_vg_name }}"
        pvs: "{{ lvm_device }}"
        state: present

    - name: Create the Pull Secret
      ansible.builtin.copy:
        content: "{{ pull_secret }}"
        dest: /etc/crio/openshift-pull-secret
        mode: 0600
        owner: root
        group: root

    - name: Template the microshift config
      ansible.builtin.template:
        src: templates/microshift-config.yml.j2
        dest: /etc/microshift/config.yaml
        owner: root
        group: root
        mode: 0644

    - name: Template the LMVO configuration
      ansible.builtin.template:
        src: templates/lvmd.yaml.j2
        dest: /etc/microshift/lvmd.yaml
        owner: root
        group: root
        mode: 0644

    - name: Enable pod network access via firewalld
      ansible.posix.firewalld:
        source: "{{ item }}"
        zone: trusted
        state: enabled
        permanent: true
        immediate: true
      loop: "{{ microshift_config.network.clusterNetworkCIDRs }}"

    - name: Enable local network access via firewalld
      ansible.posix.firewalld:
        source: 169.254.169.1
        zone: trusted
        state: enabled
        permanent: true
        immediate: true

    - name: Enable external access to the API, HTTP, and HTTPS ports
      ansible.posix.firewalld:
        port: "{{ item }}"
        zone: trusted
        state: enabled
        permanent: true
        immediate: true
      loop:
        - 6443/tcp
        - 80/tcp
        - 443/tcp

    - name: Enable external access to the API, HTTP, and HTTPS ports
      ansible.posix.firewalld:
        port: "{{ item }}"
        zone: public
        state: enabled
        permanent: true
        immediate: true
      loop:
        - 6443/tcp
        - 80/tcp
        - 443/tcp

    - name: Make microshift manifest directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
      loop:
        - /etc/microshift/manifests.d/microshift-sample-app
        - /etc/microshift/manifests.d/microshift-ext-binding

    - name: Template over the Kustomization Manifests
      ansible.builtin.template:
        src: templates/{{ item }}.j2
        dest: /etc/microshift/manifests.d/{{ item }}
        owner: root
        group: root
        mode: 0644
      loop:
        - microshift-ext-binding/kustomization.yml
        - microshift-ext-binding/serviceaccount.yml
        - microshift-ext-binding/crb.yml
        - microshift-ext-binding/secret.yml
        - microshift-sample-app/kustomization.yml
        - microshift-sample-app/00_namespace.yml
        - microshift-sample-app/05_deployment.yml
        - microshift-sample-app/10_service.yml
        - microshift-sample-app/15_route.yml

    #- name: Configure container mirror

    - name: Enable and set the Microshift service state
      ansible.builtin.systemd:
        name: microshift
        enabled: true
        state: "started"

    - name: Make a .kube folder
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: 0755

    - name: Copy over the kubeconfig file
      ansible.builtin.copy:
        remote_src: true
        src: /var/lib/microshift/resources/kubeadmin/kubeconfig
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: 0600

    - name: Copy over the remote kubeconfig file
      ansible.builtin.copy:
        remote_src: true
        src: /var/lib/microshift/resources/kubeadmin/api.{{ microshift_hostname }}.{{ microshift_base_domain }}/kubeconfig
        dest: "{{ ansible_env.HOME }}/.kube/remote-config"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: 0644

    - name: Create az command file
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          /usr/bin/az login --service-principal -u "{{ azureServicePrincipalID }}" -p "{{ azureServicePrincipalClientSecret }}" --tenant "{{ azureTenantID }}"
          /usr/bin/az connectedk8s connect --name "{{ microshift_hostname }}" \
            --resource-group "{{ azureResourceGroup }}" \
            --kube-config /kubeadmin/remote-config
        dest: "{{ ansible_env.HOME }}/.kube/az-connect.sh"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: 0755

    - name: Wait for the microshift API to come online
      ansible.builtin.shell: |
        while ! curl -k https://localhost:6443/healthz; do
          sleep 5
        done

    - name: Run the podman container to connect to Azure Arc...
      ansible.builtin.shell:
        cmd: |
          podman run --rm -it -v {{ ansible_env.HOME }}/.kube:/kubeconfig quay.io/kenmoini/rhde-ztp-ee:latest /kubeconfig/az-connect.sh"

    #- name: Connect to Azure Arc
    #  ansible.builtin.shell:
    #    cmd: |
    #      /usr/bin/az login --service-principal -u "{{ azureServicePrincipalID }}" -p "{{ azureServicePrincipalClientSecret }}" --tenant "{{ azureTenantID }}"
    #      /usr/bin/az connectedk8s connect --name "{{ microshift_hostname }}" \
    #        --resource-group "{{ azureResourceGroup }}" \
    #        --kube-config /var/lib/microshift/resources/kubeadmin/api.{{ microshift_hostname }}.{{ microshift_base_domain }}/kubeconfig

    - name: Reset the permissions on the kubeconfig file
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube/remote-config"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: 0600

    - name: Remove the azure connect script
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube/az-connect.sh"
        state: absent

    - name: Disable the Glue Service
      ansible.builtin.systemd:
        name: fdo-ansible-glue
        enabled: false
