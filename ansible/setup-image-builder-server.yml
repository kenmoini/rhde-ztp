---
# A lot shamelessly ripped off of https://github.com/redhat-manufacturing/device-edge-workshops
- name: Install Cockpit, Image Builder
  hosts: buildserver
  become: yes
  vars:
    install_packages:
      - cockpit
      - cockpit-composer
      - cockpit-storaged
      - cockpit-podman
      - jq

    microshift_release: "4.15"
    # pull_secret_location: local | remote
    pull_secret_location: remote
    # pull_secret is used for local lookups
    #pull_secret: "{{ lookup('file', '/opt/rh-pull-secret.json') }}"
    # pull_secret_path is used for remote lookups
    pull_secret_path: /opt/rh-pull-secret.json

    # Lock the RHEL release
    rhc_release: 9.4
    # Set repos
    rhc_repositories:
      - {name: "rhel-9-for-x86_64-baseos-rpms", state: enabled}
      - {name: "rhel-9-for-x86_64-appstream-rpms", state: enabled}
      - {name: "codeready-builder-for-rhel-9-x86_64-rpms", state: enabled}


  tasks:
    - name: Install needed packages
      ansible.builtin.dnf:
        state: present
        name: "{{ install_packages }}"

    - name: Start the cockpit service
      ansible.builtin.systemd:
        name: cockpit.socket
        state: started
        enabled: yes

    - name: Start the composer service
      ansible.builtin.systemd:
        name: osbuild-composer.service
        state: started
        enabled: yes

    - name: Include the osbuild role
      # https://galaxy.ansible.com/ui/repo/published/infra/osbuild/content/role/setup_server/
      ansible.builtin.include_role:
        name: infra.osbuild.setup_server

    - name: Add Microshift repositories and offline image assets
      when: microshift_release is defined
      block: 
        - name: Create rhocp-{{ microshift_release }}.toml configuration file
          copy:
            dest: "/tmp/rhocp-{{ microshift_release }}.toml"
            content: |
              id = "rhocp-{{ microshift_release }}"
              name = "Red Hat OpenShift Container Platform {{ microshift_release }} for RHEL 9"
              type = "yum-baseurl"
              url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/rhocp/{{ microshift_release }}/os"
              check_gpg = true
              check_ssl = true
              system = false
              rhsm = true

        - name: Create nvidia-cuda.toml configuration file
          copy:
            dest: "/tmp/nvidia-cuda.toml"
            content: |
              id = "cuda-rhel9-x86_64"
              name = "NVIDIA CUDA Drivers for RHEL 9"
              type = "yum-baseurl"
              url = "https://developer.download.nvidia.com/compute/cuda/repos/rhel9/{{ ansible_architecture }}"
              check_gpg = false
              check_repogpg = false
              check_ssl = true
              system = false
              rhsm = false

        - name: Create nvidia-cdk.toml configuration file
          copy:
            dest: "/tmp/nvidia-cdk.toml"
            content: |
              id = "nvidia-cdk-stable-x86_64"
              name = "NVIDIA CDK for RHEL 9"
              type = "yum-baseurl"
              url = "https://nvidia.github.io/libnvidia-container/stable/rpm/{{ ansible_architecture }}"
              check_gpg = false
              check_repogpg = false
              check_ssl = true
              system = false
              rhsm = false

        - name: Create nvidia-cdk-ex.toml configuration file
          copy:
            dest: "/tmp/nvidia-cdk-ex.toml"
            content: |
              id = "nvidia-cdk-ex-stable-x86_64"
              name = "Experimental NVIDIA CDK for RHEL 9"
              type = "yum-baseurl"
              url = "https://nvidia.github.io/libnvidia-container/experimental/rpm/{{ ansible_architecture }}"
              check_gpg = false
              check_repogpg = false
              check_ssl = true
              system = false
              rhsm = false

        - name: Create fast-datapath.toml configuration file
          copy:
            dest: "/tmp/fast-datapath.toml"
            content: |
              id = "fast-datapath"
              name = "Fast Datapath for RHEL 9"
              type = "yum-baseurl"
              url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/fast-datapath/os"
              check_gpg = true
              check_ssl = true
              system = false
              rhsm = true

        - name: Create codeready-builder.toml configuration file
          copy:
            dest: "/tmp/codeready-builder.toml"
            content: |
              id = "codeready-builder"
              name = "CodeReady Builder for RHEL 9"
              type = "yum-baseurl"
              url = "https://cdn.redhat.com/content/dist/rhel9/9.4/{{ ansible_architecture }}/codeready-builder/os"
              check_gpg = true
              check_ssl = true
              system = false
              rhsm = true

        - name: Create epel.toml configuration file
          copy:
            dest: "/tmp/epel.toml"
            content: |
              id = "epel"
              name = "EPEL for RHEL 9"
              type = "yum-metalink"
              url = "https://mirrors.fedoraproject.org/metalink?repo=epel-$releasever&arch=$basearch&infra=$infra&content=$contentdir"
              check_gpg = false
              check_ssl = true
              system = false
              rhsm = false

        - name: Add sources to Image Builder
          command: "sudo composer-cli sources add {{ item }}"
          loop:
            - "/tmp/rhocp-{{ microshift_release }}.toml"
            - "/tmp/fast-datapath.toml"
            - "/tmp/nvidia-cuda.toml"
            - "/tmp/nvidia-cdk.toml"
            - "/tmp/codeready-builder.toml"
            - "/tmp/epel.toml"
            #- "/tmp/nvidia-cdk-ex.toml"

        - name: Enable OCP repo on the host for Microshift
          community.general.rhsm_repository:
            state: enabled
            name: "rhocp-{{ microshift_release }}-for-rhel-9-{{ ansible_architecture }}-rpms"

        - name: Getting microshift-release-info package
          ansible.builtin.shell:
            cmd: dnf download -y microshift-release-info
          register: _dnf_output

          #bug with cmd output
        - name: Getting microshift-release-info package
          ansible.builtin.shell:
            cmd: dnf download -y microshift-release-info
          register: _dnf_output

        - name: Display captured _dnf_output string
          debug:
            var: _dnf_output


        - name: Capture filename from the output
          set_fact:
            _microshift_release_info_string: >-
              {{
                _dnf_output.stdout
                | regex_search('microshift-release-info-[^\n:]*')
                | default('')
                | regex_replace(':$', '')
              }}

        - name: Display captured microshift-release-info string
          debug:
            var: _microshift_release_info_string

        - name: Running rpm2cpio for the microshift-release-info package
          ansible.builtin.shell:
            cmd: rpm2cpio {{ _microshift_release_info_string }} | cpio -idmv

        - name: Extracting the Microshift images
          ansible.builtin.shell:
            cmd: jq -r '.images | .[] | ("[[containers]]\nsource = \"" + . + "\"\n")' "./usr/share/microshift/release/release-{{ ansible_architecture }}.json" >> "microshift-offline-images"

        - name: Create /etc/osbuild-worker/ directory
          when: pull_secret is defined or pull_secret_path is defined
          file:
            path: /etc/osbuild-worker/
            state: directory

        - name: Read in the remote pull secret data
          when: pull_secret_path is defined and pull_secret_location == "remote"
          ansible.builtin.slurp:
            src: "{{ pull_secret_path }}"
          register: pull_secret_slurp

        - name: Put pull_secret into /etc/osbuild-worker/pull-secret.json - local
          when: pull_secret is defined and pull_secret_location == "local"
          copy:
            content: "{{ pull_secret }}"
            dest: /etc/osbuild-worker/pull-secret.json

        - name: Put pull_secret into /etc/osbuild-worker/pull-secret.json - remote
          when: pull_secret is defined pull_secret_location == "remote"
          copy:
            content: "{{ pull_secret_slurp['content'] | b64decode }}"
            dest: /etc/osbuild-worker/pull-secret.json

        - name: Create /etc/osbuild-worker/osbuild-worker.toml
          when: pull_secret is defined or pull_secret_path is defined
          copy:
            content: |
              [containers]
              auth_file_path = "/etc/osbuild-worker/pull-secret.json"
            dest: /etc/osbuild-worker/osbuild-worker.toml

        - name: Restart osbuild-worker@1.service
          when: pull_secret is defined or pull_secret_path is defined
          systemd:
            name: osbuild-worker@1
            state: restarted

        - name: Disable OCP repo 
          community.general.rhsm_repository:
            state: disabled
            name: "rhocp-{{ microshift_release }}-for-rhel-9-{{ ansible_architecture }}-rpms"
